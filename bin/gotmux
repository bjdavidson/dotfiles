# Finds a matching work or project directory.
function connect {
  local session="${1:-}"
  if [[ -n "${session}" && -z "${start_dir}" ]]; then
    start_dir=$(find ~/work ~/projects ~/git -maxdepth 2 -type d -iregex ".*/${session}/.git" | head -n 1)
    if [[ -n "${start_dir}" ]]; then
      start_dir=$(dirname "${start_dir}")
    fi
  fi
  if [[ -z "${session}" ]]; then
    session=main
  fi
  if [[ -z "${start_dir}" ]]; then
    start_dir="${HOME}"
  else
    echo "starting in ${start_dir}..."
  fi

  simple_connect "${session}"
}

function simple_connect {

  local session="${1:-main}"
  [[ -n "${start_dir}" ]] && cd "${start_dir}"

  if tmux has-session -t "${session}"; then
    echo -n "[attaching '${session}']"
    tmux -u attach -t "${session}"
  else
    echo -n "[starting '${session}']"
    tmux -u new-session -s "${session}"
  fi
}

function list {
  if [[ $show_headers = true ]]; then
    echo "Sessions:"
    tmux list-sessions
  else
    tmux list-sessions | sed 's/:.*//g'
  fi
  return 0
}

function projects {
  [[ $show_headers = true ]] && echo "Projects:"
  local pdir
  find -L ~/work ~/projects ~/git -maxdepth 2 -type d -name '.git' | while read pdir; do
    local name=$(basename $(dirname "${pdir}"))
    echo "${name}"
  done | sort -u
  return 0
}

function help {
    cat <<EOF
Usage: $0 [options] <session>

  -d --directory DIR  Start tmux in this directory.
  -l --list           List all sessions.
  -p --projects       List all known projects.
  -h --help           You're soaking in it.
EOF
  return 0
}

mode="connect"
typeset -a args
typeset start_dir=""
typeset show_headers=true
args=(   )
while (( $#* > 0 )); do
  case "${1}" in
    --list|-l) mode="list" ;;
    --projects|-p) mode="projects" ;;
    --help|-h) mode="help" ;;
    --no-headers|-s) show_headers=false ;;
    --dir*|-d) shift; start_dir="${1}" ;;
    *) args+="${1}";;
  esac
  shift
done

case "${mode}" in
  list) list ; return $? ;;
  help) help ; return $? ;;
  projects) projects ; return $? ;;
  connect) set +u ; connect "${args[@]}" ; return $? ;;
esac

echo "Something has gone wrong."
return 11
